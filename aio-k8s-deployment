#!/bin/bash

usage () {
  echo "Usage:"
  echo "   ./k8s-aio.sh <HOSR_IP>"
  exit 1
}

enable_k8s_cli () {
	echo "---> Enabling kubectl CLI"
	mkdir -p $HOME/.kube
	sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
	sudo chown $(id -u):$(id -g) $HOME/.kube/config
}

install_calico () {
	echo "---> Installing Calico"
	sleep 2
	kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml
	#Wait till Calico is up and running
	for i in {1..10}
	do
		STATUS_CALICO_CONTROLLER=`kubectl get pod -n kube-system|grep "calico-kube-controllers"|awk '{print $3}'`
		STATUS_CALICO_NODE=`kubectl get pod -n kube-system|grep "calico-node"|awk '{print $3}'`
		if [ "$STATUS_CALICO_CONTROLLER" != "Running" ] || [ "$STATUS_CALICO_NODE" != "Running" ]
		then
		        echo "Curret Calico controller state is not ready: ${STATUS_CALICO_CONTROLLER}"
		        echo "Curret Calico node state is not ready: ${STATUS_CALICO_NODE}"
			echo "Waiting 5 seconds ..."
			sleep 5
			continue
		else
		        echo "Calico is up and running now..."
			sleep 1
			break
		fi
	done
	if [ "$STATUS_CALICO_CONTROLLER" != "Running" ] || [ "$STATUS_CALICO_NODE" != "Running" ]
	then 
		echo "Calico is failed!"
		exit 1
	fi
}

install_MetalLB () {
echo "---> Installing MetalLB (Load Balancer)"
sleep 1
cd /root; mkdir metalLB; cd metalLB
wget https://raw.githubusercontent.com/google/metallb/v0.8.1/manifests/metallb.yaml
kubectl apply -f ./metallb.yaml
sleep 5
#configMap
echo "---> Creating and applying configmap for metalLB"
touch metalLB_conf.yaml
cat <<EOF >./metalLB_conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - ${HOST_IP%.*}.244-${HOST_IP%.*}.254
EOF

	kubectl apply -f ./metalLB_conf.yaml
	sleep 3
}

cli_alias () {
	echo "---> kubectl CLI alias (shortcuts)"
	sleep 2
	cat <<-'EOF'>>/root/.bashrc
	alias kt='kubectl'
	alias ktp='kubectl get pod -o wide'
	alias kts='kubectl get svc -o wide'
	alias ktd='kubectl get deployment -o wide'
	alias ktn='kubectl get node -o wide'

	PS1="\[\033[32m\][\u@\h \w]:\[\033[37m\]"
	EOF
	source /root/.bashrc
}

#Summary

summary () {
	echo "------------------------------------------------------"
	echo "------------- AIO k8s deployment summary (Bare Metal)  -------------"
	echo "------------------------------------------------------"
	echo "---> Successfully installed Git"
	echo "---> Successfully installed Docker Community Edition"
	echo "---> Successfully installed kubeadm, kubelet, kubectl"
	echo "---> Successfully installed Calico CNI (Container Networking Interface)"
	echo "---> Successfully installed MetalLB Load Balancer"
	echo "---> Successfully untainted and re-labeled the master node"
	echo "---> Successfully ran a sample \"hello\" service "
	echo "---> Successfully customised P1 prompt style and created kubectl alias"
}

hello_example () {
cat <<EOF > ./tutum-hello-service.yaml
---
kind: Service
apiVersion: v1
metadata:
  name: tutum-hello-service
spec:
  selector:
    app: tutum-hello
  ports:
    - protocol: "TCP"
      # Port accessible inside cluster
      port: 8081
      # Port to forward to inside the pod
      targetPort: 80
      # Port accessible outside cluster
      nodePort: 30001
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tutum-hello-deployment
spec:
  selector:
    matchLabels:
      app: tutum-hello
  replicas: 1
  template:
    metadata:
      labels:
        app: tutum-hello
    spec:
      #hostNetwork: true
      containers:
        - name: my-tutum-hello
          image: tutum/hello-world
          ports:
            - containerPort: 80
EOF

kubectl apply -f ./tutum-hello-service.yaml
echo "---> Deploying sample service: tutum-hello"
sleep 5

curl $HOST_IP:30001

}

#Check, if running as root
if test "$USERNAME" != "root"
then
	echo "You are not in root mode, please run script as a root user."
	exit 1
fi

#Check argument
if [ $# -eq 1 ]
then
	if [[ $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]
	then
		echo "Argument checking: success"
		HOST_IP=$1
	else
		echo "Argument checking: failed"
		echo -n "The argument \""; echo -n $1; echo "\" is not in IP4 format: 255.255.255.255"
		exit 1
fi
else
	echo "The script takes 1 argument only"
	usage
fi

#Check Ubuntu vesion
echo "Linux OS Release: Ubuntu 18.04"
OS_RELEASE="$(lsb_release -a|grep "Ubuntu 18.04")"
if [ $? -eq 0 ]
then
   echo "Successful."
   sleep 1
else
   echo "Failed. The current linux OS release is:"
   lsb_release -a|grep "Release"
   exit 0
fi

#Update/Upgrade system
apt update -y; apt dist-upgrade -y

#Install and verify Docker
echo "---> Installing Docker"
apt install -y docker.io apt-transport-https curl
systemctl enable docker.service
DOCKER_VERSION="$(docker version|grep -m1 "Version"|awk '{print $2}')"
if [ $? -eq 0 ]
then
	echo -n "Current Docker version: "; echo $DOCKER_VERSION 
	echo "Suggested Docker version 18.09 and above."
	sleep 2
else
	echo "Install Docker CE (Community Edition)"
	sleep 1
	apt install -y docker.io apt-transport-https curl
	systemctl enable docker.service
fi
sleep 2

#Install git
apt install git

#Configure SWAP
echo "---> Swap turn off"
swapoff -a
sleep 1
echo "---> nested virtualization"
./nested_node.sh

#install k8s
echo "---> Install k8s"; sleep 1
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
touch /etc/apt/sources.list.d/kubernetes.list
echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" >>/etc/apt/sources.list.d/kubernetes.list

apt update; apt dist-upgrade -y
apt install -y kubelet kubeadm kubectl --allow-change-held-packages
echo "Environment=\"cgroup-driver=systemd/cgroup-driver=cgroupfs\"" >> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

mkdir kube-cluster
cat <<EOF > ./kube-cluster/kubeadm-controlplane-config.yaml
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
kubernetesVersion: stable
apiServer:
  certSANs:
  - "${HOST_IP}"
controlPlaneEndpoint: ${HOST_IP}:6443
networking:
  podSubnet: 192.168.0.0/16
EOF

echo "---> Initialise k8s cluster: kubeadm init"
kubeadm init --config=./kube-cluster/kubeadm-controlplane-config.yaml
enable_k8s_cli
#label aio node
kubectl label nodes $HOSTNAME kubernetes.io/role=worker

#untaint the aio node
kubectl taint nodes $HOSTNAME node-role.kubernetes.io/master-
#kubectl taint nodes $HOSTNAME key:NoSchedule-

#install CNI
install_calico

#install metal LB
install_MetalLB
sleep 5
#customise k8s cli
cli_alias

#summary
summary

sleep 3

hello_example

exit 0

